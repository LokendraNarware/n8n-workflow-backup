{"createdAt":"2025-02-25T18:08:59.279Z","updatedAt":"2025-02-25T19:16:07.231Z","id":"m8dyWBYW9yxMGUZo","name":"Getting social media links from websites","active":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-720,-200],"id":"87cd3987-28b6-4464-b483-64fa23e59742","name":"When clicking ‘Test workflow’"},{"parameters":{"jsCode":"// Function to extract emails, phone numbers, addresses, and websites from text\nfunction extractData(text) {\n    // Regular expressions for email, phone numbers, and websites\n    const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g;\n    const phoneRegex = /\\b\\d{10,12}\\b/g; // Matches 10-12 digit phone numbers\n    \n    // Better address regex - this is a generic pattern that may need adjustment based on your data\n    const addressRegex = /\\b\\d+\\s+[A-Za-z0-9\\s,\\.]+(?:Avenue|Lane|Road|Boulevard|Drive|Street|Ave|Ln|Rd|Blvd|Dr|St)\\.?(?:\\s+[A-Za-z]+)?(?:,\\s*[A-Za-z]+)?(?:,\\s*[A-Z]{2})?\\s*\\d{5}(?:-\\d{4})?\\b/gi;\n    \n    const websiteRegex = /https?:\\/\\/(?:www\\.)?([A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)(?:\\/[^\\s\"')]*)?/g;\n    \n    // Extracting data\n    const emails = [...new Set(text.match(emailRegex) || [])];\n    const phoneNumbers = [...new Set(text.match(phoneRegex) || [])];\n    const addresses = [...new Set((text.match(addressRegex) || []).map(addr => addr.trim()))];\n    \n    // Social media domains list\n    const socialMediaDomains = ['facebook.com', 'instagram.com', 'twitter.com', 'linkedin.com', 'youtube.com', 'pinterest.com', 'tiktok.com'];\n    \n    // Website extraction\n    const mainWebsites = [];\n    const socialMediaLinks = {};\n    const uniqueMainWebsites = new Set();\n    const seenUrlPatterns = new Set();\n    \n    let match;\n    while ((match = websiteRegex.exec(text)) !== null) {\n        const fullUrl = match[0];\n        const domain = match[1];\n        \n        // Skip resource files\n        if (!/\\.(jpg|jpeg|png|gif|svg|webp|js|css|ico|woff|woff2|ttf|eot)(\\?.*)?$/i.test(fullUrl)) {\n            // Get base URL (without query parameters and fragments)\n            const baseUrl = fullUrl.split(/[?#]/)[0];\n            \n            // Check if it's a social media link\n            const socialMediaPlatform = socialMediaDomains.find(socialdomain => domain.includes(socialdomain));\n            \n            if (socialMediaPlatform) {\n                // Extract platform name (e.g., 'facebook' from 'facebook.com')\n                const platformName = socialMediaPlatform.split('.')[0];\n                \n                // Store only the first instance of each social platform\n                if (!socialMediaLinks[platformName]) {\n                    socialMediaLinks[platformName] = baseUrl;\n                }\n            } else {\n                // Process main websites\n                // Create a pattern by removing repeating number patterns\n                const urlPattern = baseUrl.replace(/(-\\d+)+$/, '');\n                \n                // Only add if we haven't seen this pattern before\n                if (!seenUrlPatterns.has(urlPattern)) {\n                    seenUrlPatterns.add(urlPattern);\n                    \n                    // If we haven't already added this exact URL\n                    if (!uniqueMainWebsites.has(baseUrl)) {\n                        uniqueMainWebsites.add(baseUrl);\n                        mainWebsites.push({\n                            url: baseUrl,\n                            domain: domain\n                        });\n                    }\n                }\n            }\n        }\n    }\n    \n    return {\n        emails: emails,\n        phoneNumbers: phoneNumbers,\n        socialMediaLinks: socialMediaLinks,\n        addresses: addresses,\n        mainWebsites: mainWebsites\n    };\n}\n\n// n8n Function Node Input\nconst inputText = $json[\"data\"]; // Replace with your text source in n8n\n\n// Extract information\nconst extractedData = extractData(inputText);\n\n// Return structured output for n8n\nreturn [{ data: extractedData }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-40,-200],"id":"ab34077d-f907-4074-a353-800d039e8f0d","name":"Code"},{"parameters":{"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-400,-200],"id":"21533167-580d-493f-ab18-12183bf67ec6","name":"HTTP Request"},{"parameters":{"html":"={{ $json.data }}","options":{}},"type":"n8n-nodes-base.markdown","typeVersion":1,"position":[-220,-200],"id":"02815110-7869-4244-8b52-35519bfc485e","name":"Markdown"},{"parameters":{"jsCode":"// Import axios for API requests\nconst axios = require('axios');\n\n// Get input data from the workflow\nconst websiteURL = $json[\"website\"]; // Website to visit\n\n// RapidAPI details\nconst API_KEY = \"your-rapidapi-key\"; // Replace with your actual key\nconst API_HOST = \"your-rapidapi-host\"; // API host from RapidAPI\n\n// API endpoint\nconst API_URL = `https://your-api-host.com/extract?url=${encodeURIComponent(websiteURL)}`;\n\n// API request function\nasync function fetchWebsiteData() {\n    try {\n        const response = await axios.get(API_URL, {\n            headers: {\n                \"X-RapidAPI-Key\": API_KEY,\n                \"X-RapidAPI-Host\": API_HOST\n            }\n        });\n\n        // Return extracted website content\n        return [{\n            website: websiteURL,\n            data: response.data // Website HTML or text data\n        }];\n    } catch (error) {\n        return [{\n            error: error.message || \"API request failed\",\n            website: websiteURL\n        }];\n    }\n}\n\n// Execute API call\nreturn fetchWebsiteData();\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-560,-200],"id":"6a398d4a-ca85-4f8d-a7b2-b18a91048fe0","name":"Code1"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Code":{"main":[[]]},"HTTP Request":{"main":[[{"node":"Markdown","type":"main","index":0}]]},"Markdown":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code1":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"eeadba61-6825-4dc3-8830-6b7b4a220406","triggerCount":0,"tags":[]}